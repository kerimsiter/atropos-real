Introduction
tip
If you are new to Socket.IO, we recommend checking out our tutorial.

What Socket.IO is
Socket.IO is a library that enables low-latency, bidirectional and event-based communication between a client and a server.

Diagram of a communication between a server and a client
The Socket.IO connection can be established with different low-level transports:

HTTP long-polling
WebSocket
WebTransport
Socket.IO will automatically pick the best available option, depending on:

the capabilities of the browser (see here and here)
the network (some networks block WebSocket and/or WebTransport connections)
You can find more detail about that in the "How it works" section.

Server implementations
Language	Website
JavaScript (Node.js)	- Installation steps
- API
- Source code
JavaScript (Deno)	https://github.com/socketio/socket.io-deno
Java	https://github.com/mrniko/netty-socketio
Java	https://github.com/trinopoty/socket.io-server-java
Python	https://github.com/miguelgrinberg/python-socketio
Golang	https://github.com/googollee/go-socket.io
Rust	https://github.com/Totodore/socketioxide
Client implementations
Language	Website
JavaScript (browser, Node.js or React Native)	- Installation steps
- API
- Source code
JavaScript (for WeChat Mini-Programs)	https://github.com/weapp-socketio/weapp.socket.io
Java	https://github.com/socketio/socket.io-client-java
C++	https://github.com/socketio/socket.io-client-cpp
Swift	https://github.com/socketio/socket.io-client-swift
Dart	https://github.com/rikulo/socket.io-client-dart
Python	https://github.com/miguelgrinberg/python-socketio
.Net	https://github.com/doghappy/socket.io-client-csharp
Rust	https://github.com/1c3t3a/rust-socketio
Kotlin	https://github.com/icerockdev/moko-socket-io
PHP	https://github.com/ElephantIO/elephant.io
Golang	https://github.com/maldikhan/go.socket.io
What Socket.IO is not
caution
Socket.IO is NOT a WebSocket implementation.

Although Socket.IO indeed uses WebSocket for transport when possible, it adds additional metadata to each packet. That is why a WebSocket client will not be able to successfully connect to a Socket.IO server, and a Socket.IO client will not be able to connect to a plain WebSocket server either.

// WARNING: the client will NOT be able to connect!
const socket = io("ws://echo.websocket.org");

If you are looking for a plain WebSocket server, please take a look at ws or µWebSockets.js.

There are also discussions for including a WebSocket server in the Node.js core.

On the client-side, you might be interested in the robust-websocket package.

caution
Socket.IO is not meant to be used in a background service for mobile applications.

The Socket.IO library keeps an open TCP connection to the server, which may result in a high battery drain for your users. Please use a dedicated messaging platform like FCM for this use case.

Features
Here are the features provided by Socket.IO over plain WebSockets:

HTTP long-polling fallback
The connection will fall back to HTTP long-polling in case the WebSocket connection cannot be established.

This feature was the #1 reason people used Socket.IO when the project was created more than ten years ago (!), as the browser support for WebSockets was still in its infancy.

Even if most browsers now support WebSockets (more than 97%), it is still a great feature as we still receive reports from users that cannot establish a WebSocket connection because they are behind some misconfigured proxy.

Automatic reconnection
Under some particular conditions, the WebSocket connection between the server and the client can be interrupted with both sides being unaware of the broken state of the link.

That's why Socket.IO includes a heartbeat mechanism, which periodically checks the status of the connection.

And when the client eventually gets disconnected, it automatically reconnects with an exponential back-off delay, in order not to overwhelm the server.

Packet buffering
The packets are automatically buffered when the client is disconnected, and will be sent upon reconnection.

More information here.

Acknowledgements
Socket.IO provides a convenient way to send an event and receive a response:

Sender

socket.emit("hello", "world", (response) => {
  console.log(response); // "got it"
});

Receiver

socket.on("hello", (arg, callback) => {
  console.log(arg); // "world"
  callback("got it");
});

You can also add a timeout:

socket.timeout(5000).emit("hello", "world", (err, response) => {
  if (err) {
    // the other side did not acknowledge the event in the given delay
  } else {
    console.log(response); // "got it"
  }
});

Broadcasting
On the server-side, you can send an event to all connected clients or to a subset of clients:

// to all connected clients
io.emit("hello");

// to all connected clients in the "news" room
io.to("news").emit("hello");

This also works when scaling to multiple nodes.

Multiplexing
Namespaces allow you to split the logic of your application over a single shared connection. This can be useful for example if you want to create an "admin" channel that only authorized users can join.

io.on("connection", (socket) => {
  // classic users
});

io.of("/admin").on("connection", (socket) => {
  // admin users
});

More on that here.

Common questions
Is Socket.IO still needed today?
That's a fair question, since WebSockets are supported almost everywhere now.

That being said, we believe that, if you use plain WebSockets for your application, you will eventually need to implement most of the features that are already included (and battle-tested) in Socket.IO, like reconnection, acknowledgements or broadcasting.

What is the overhead of the Socket.IO protocol?
socket.emit("hello", "world") will be sent as a single WebSocket frame containing 42["hello","world"] with:

4 being Engine.IO "message" packet type
2 being Socket.IO "message" packet type
["hello","world"] being the JSON.stringify()-ed version of the arguments array
So, a few additional bytes for each message, which can be further reduced by the usage of a custom parser.

info
The size of the browser bundle itself is 10.4 kB (minified and gzipped).

You can find the details of the Socket.IO protocol here.

Something does not work properly, please help?
Please check our Troubleshooting guide.Server Installation
info
The latest release is currently 4.8.1, released in October 2024.

You can find the release notes here.

Prerequisites
Please make sure that Node.js is installed on your system. The current Long Term Support (LTS) release is an ideal starting point, see here.

info
At least Node.js 10 is needed, older versions are not supported anymore.

Installation
To install the latest release:

NPM
Yarn
pnpm
Bun
npm install socket.io

To install a specific version:

NPM
Yarn
pnpm
Bun
npm install socket.io@version

Additional packages
By default, Socket.IO use the WebSocket server provided by the ws package.

There are 2 optional packages that can be installed alongside this package. These packages are binary add-ons which improve certain operations. Prebuilt binaries are available for the most popular platforms so you don't necessarily need to have a C++ compiler installed on your machine.

bufferutil: Allows to efficiently perform operations such as masking and unmasking the data payload of the WebSocket frames.
utf-8-validate: Allows to efficiently check if a message contains valid UTF-8 as required by the spec.
To install those packages:

NPM
Yarn
pnpm
Bun
npm install --save-optional bufferutil utf-8-validate

Please note that these packages are optional, the WebSocket server will fallback to the Javascript implementation if they are not available. More information can be found here.

Other WebSocket server implementations
Any Websocket server implementation which exposes the same API as ws (notably the handleUpgrade method) can be used.

For example, you can use the eiows package, which is a fork of the (now deprecated) uws package:

NPM
Yarn
pnpm
Bun
npm install eiows

And then use the wsEngine option:

const { Server } = require("socket.io");
const eiows = require("eiows");

const io = new Server(3000, {
  wsEngine: eiows.Server
});

This implementation "allows, but doesn't guarantee" significant performance and memory-usage improvements over the default implementation. As usual, please benchmark it against your own usage.

Usage with µWebSockets.js
Starting with version 4.4.0, a Socket.IO server can now bind to a µWebSockets.js server.

Installation:

NPM
Yarn
pnpm
Bun
npm install uWebSockets.js@uNetworking/uWebSockets.js#v20.4.0

Usage:

const { App } = require("uWebSockets.js");
const { Server } = require("socket.io");

const app = App();
const io = new Server();

io.attachApp(app);

io.on("connection", (socket) => {
  // ...
});

app.listen(3000, (token) => {
  if (!token) {
    console.warn("port already in use");
  }
});

Miscellaneous
Dependency tree
A basic installation of the server includes 21 packages, of which 6 are maintained by our team:

└─┬ socket.io@4.8.1
  ├─┬ accepts@1.3.8
  │ ├─┬ mime-types@2.1.35
  │ │ └── mime-db@1.52.0
  │ └── negotiator@0.6.3
  ├── base64id@2.0.0
  ├─┬ cors@2.8.5
  │ ├── object-assign@4.1.1
  │ └── vary@1.1.2
  ├─┬ debug@4.3.7
  │ └── ms@2.1.3
  ├─┬ engine.io@6.6.4
  │ ├─┬ @types/cors@2.8.17
  │ │ └── @types/node@22.13.9 deduped
  │ ├─┬ @types/node@22.13.9
  │ │ └── undici-types@6.20.0
  │ ├── accepts@1.3.8 deduped
  │ ├── base64id@2.0.0 deduped
  │ ├── cookie@0.7.2
  │ ├── cors@2.8.5 deduped
  │ ├── debug@4.3.7 deduped
  │ ├── engine.io-parser@5.2.3
  │ └─┬ ws@8.17.1
  │   ├── UNMET OPTIONAL DEPENDENCY bufferutil@^4.0.1
  │   └── UNMET OPTIONAL DEPENDENCY utf-8-validate@>=5.0.2
  ├─┬ socket.io-adapter@2.5.5
  │ ├── debug@4.3.7 deduped
  │ └── ws@8.17.1 deduped
  └─┬ socket.io-parser@4.2.4
    ├── @socket.io/component-emitter@3.1.2
    └── debug@4.3.7 deduped

info
The type declarations for 3rd party packages are included, in order to ease the use of the library for TypeScript users (but at the cost of a slightly-larger package).

See also: https://github.com/microsoft/types-publisher/issues/81#issuecomment-234051345

Transitive versions
The engine.io package brings the engine that is responsible for managing the low-level connections (HTTP long-polling or WebSocket). See also: How it works

socket.io version	engine.io version	ws version
4.8.x	6.6.x	8.17.x
4.7.x	6.5.x	8.17.x
4.6.x	6.4.x	8.11.x
4.5.x	6.2.x	8.2.x
4.4.x	6.1.x	8.2.x
4.3.x	6.0.x	8.2.x
4.2.x	5.2.x	7.4.x
4.1.x	5.1.x	7.4.x
4.0.x	5.0.x	7.4.x
3.1.x	4.1.x	7.4.x
3.0.x	4.0.x	7.4.x
2.5.x	3.6.x	7.5.x
2.4.x	3.5.x	7.4.xClient Installation
info
The latest release is currently 4.8.1, released in October 2024.

You can find the release notes here.

Version compatibility
Here is the compatibility table between the server and the JS client:

JS Client version	Socket.IO server version
1.x	2.x	3.x	4.x
1.x	YES	NO	NO	NO
2.x	NO	YES	YES1	YES1
3.x	NO	NO	YES	YES
4.x	NO	NO	YES	YES
[1] Yes, with allowEIO3: true

Please check the associated migration guides:

v2 to v3
v3 to v4
Browser support
Socket.IO does support IE9 and above. IE 6/7/8 are not supported anymore.

Browser compatibility is tested thanks to the awesome Sauce Labs platform:

Browser support

Installation
Standalone build
By default, the Socket.IO server exposes a client bundle at /socket.io/socket.io.js.

io will be registered as a global variable:

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
</script>

If you don't need this (see other options below), you can disable the functionality on the server side:

const { Server } = require("socket.io");

const io = new Server({
  serveClient: false
});

From a CDN
You can also include the client bundle from a CDN:

<script src="https://cdn.socket.io/4.8.1/socket.io.min.js" integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+" crossorigin="anonymous"></script>


Socket.IO is also available from other CDN:

cdnjs: https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.8.1/socket.io.min.js
jsDelivr: https://cdn.jsdelivr.net/npm/socket.io-client@4.8.1/dist/socket.io.min.js
unpkg: https://unpkg.com/socket.io-client@4.8.1/dist/socket.io.min.js
There are several bundles available:

Name	Size	Description
socket.io.js	34.7 kB gzip	Unminified version, with debug
socket.io.min.js	14.7 kB min+gzip	Production version, without debug
socket.io.msgpack.min.js	15.3 kB min+gzip	Production version, without debug and with the msgpack parser
The debug package allows to print debug information to the console. You can find more information here.

During development, we recommend using the socket.io.js bundle. By setting localStorage.debug = 'socket.io-client:socket', any event received by the client will be printed to the console.

For production, please use the socket.io.min.js bundle, which is an optimized build excluding the debug package.

From NPM
The Socket.IO client is compatible with bundlers like webpack or browserify.

NPM
Yarn
pnpm
Bun
npm install socket.io-client

The client can also be run from Node.js.

Note: for the reasons cited above, you may want to exclude debug from your browser bundle. With webpack, you can use webpack-remove-debug.

Note for TypeScript users: the types are now included in the socket.io-client package and thus the types from @types/socket.io-client are not needed anymore and may in fact cause errors:

Object literal may only specify known properties, and 'extraHeaders' does not exist in type 'ConnectOpts'

Miscellaneous
Dependency tree
A basic installation of the client includes 9 packages, of which 5 are maintained by our team:

└─┬ socket.io-client@4.8.1
  ├── @socket.io/component-emitter@3.1.2
  ├─┬ debug@4.3.7
  │ └── ms@2.1.3
  ├─┬ engine.io-client@6.6.3
  │ ├── @socket.io/component-emitter@3.1.2 deduped
  │ ├── debug@4.3.7 deduped
  │ ├── engine.io-parser@5.2.3
  │ ├─┬ ws@8.17.1
  │ │ ├── UNMET OPTIONAL DEPENDENCY bufferutil@^4.0.1
  │ │ └── UNMET OPTIONAL DEPENDENCY utf-8-validate@>=5.0.2
  │ └── xmlhttprequest-ssl@2.1.2
  └─┬ socket.io-parser@4.2.4
    ├── @socket.io/component-emitter@3.1.2 deduped
    └── debug@4.3.7 deduped

Transitive versions
The engine.io-client package brings the engine that is responsible for managing the low-level connections (HTTP long-polling or WebSocket). See also: How it works

socket.io-client version	engine.io-client version	ws version1
4.8.x	6.6.x	8.17.x
4.7.x	6.5.x	8.17.x
4.6.x	6.4.x	8.11.x
4.5.x	6.2.x	8.2.x
4.4.x	6.1.x	8.2.x
4.3.x	6.0.x	8.2.x
4.2.x	5.2.x	7.4.x
4.1.x	5.1.x	7.4.x
4.0.x	5.0.x	7.4.x
3.1.x	4.1.x	7.4.x
3.0.x	4.0.x	7.4.x
2.5.x	3.5.x	7.5.x
2.4.x	3.5.x	7.5.x
[1] for Node.js users only. In the browser, the native WebSocket API is used.